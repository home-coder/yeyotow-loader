              Yeyotow系统Y1

该文档包含了要做的小任务计划，重点在硬件操作

1.ddr
完成ddr测试代码
https://wenku.baidu.com/view/2de81a9de009581b6ad9eb22.html

完成如下疑问：
//TODO
解答*(volatitle unsigned int *)0x50000000 = 0x12345678;的执行过程的疑问：
如果先发送一个地址0x5000000给AXI总线,然后再写入一个0x12345678数据到总线上吗，这样是如何写到具体地址的？
另外，ddr的行地址列地址，行13位列10位，难道是2的23次方才8M？然而具体可访问空间最大支持多少？
目前的ddr芯片看到是16根地址线，总共32根数据线。16根地址线是怎样与行列联系的，又是如何访问到具体内存的。
并且系统是32位机是什么意思，一个32位的地址如何发送到ddr的16位地址线上。

//TODO
ddr控制器在P41页说明为HCLKX2提供时钟，应该是266MHz，目前使用的是133MHz。

2.命令支持
如reset（应该是跳到reset异常入口）, setenv（一堆如ip设置等），pri 打印环境变量等

3.uart完善
//TODO
修改为支持中断模式，带FIFO，DMA等
按下backspace按键可以正常删除字符；
//TODO
支持PC通过串口给小机发送数据，小机接收数据(yeyotow启动文件)后写入到nand，然后再从nand写入到内存，然后通过go命令从内存启动系统
使用MD5校验两边文件是否一致，MD5方法参考Lichee中Android Recovery方式

4.nand
nand测试；
如arm.bin 写入0 40000范围，另外写一个测试test.bin写入41000 48000，然后启动yeyotow后读入test.bin到内存，然后跳转执行，返回

//TODO
nand驱动编写，搞清楚硬件的连接方式，初始化方式，读写原理，什么块操作，扇区什么的是什么东西
sdcard驱动编写
//TODO
将linux内核加载好，Y2任务复杂一些，需要移植一个ucos-II到yeyotow系统
移植一个文件系统，实现查看分区内文件的功能

5.时钟
完美的完成get_clk等功能，可以根据参数不同选择不同的时钟，时钟也可以配置
做到外设可以获取时钟，外设关闭时可以关闭时钟等接口

6.中断
将中断重新实现，能够注册函数，屏蔽中断等

7.GPIO
将gpio设置为有通用接口的，支持输出，支持输入，支持中断

8.IIC裸机驱动的编写

8.MMU
如何在Yeyotow中实现对DDR的MMU，并创建一个接口可以实现remap功能，对物理地址进行映射



------------------------------------------------------------------------------------
                Yeyotow系统Y2

该文档包含了要做的小任务计划，重点在数据处理

1.网络
对协议更加完美的支持，如tftp等

2.声卡
如支持按键控制（循环 暂停 下一首），数据保存；
采样率 等完美支持；
通过windows的软件进行声音文件的分析，尽量专业。

3.调度系统实现
实现tick时钟，实现一个调度器（难）

4.ucos-II的移植，最终要启动一个小系统

5.文件系统的移植，通过ucos-II启动一个文件系统

